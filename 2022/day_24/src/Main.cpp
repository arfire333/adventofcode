#include "Grid.h"
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <raylib.h>
#include <sstream>
#include <string>
#include <vector>
#include "Elf.h"
using namespace std;

const vector<string> EXAMPLE_IN = {{"#.#####"}, {"#.....#"}, {"#>....#"},
                                   {"#.....#"}, {"#...v.#"}, {"#.....#"},
                                   {"#####.#"}};

const vector<string> EXAMPLE2_IN = {{"#.######"}, {"#>>.<^<#"}, {"#.<..<<#"},
                                    {"#>v.><>#"}, {"#<^v^^>#"}, {"######.#"}};
const vector<string> MINE_IN = {
    {"#.#######################################################################"
     "#################################################"},
    {"#>v<^v>v^.^>v<v.^<.^v>^v^<^v^^v.><^v^v<><>><^>^>>>vv..>.^<<>><^<v>^vv<>^"
     "v<v>v>.<><<<><>>v..v<^^vv^^vv.^v^^>^^^.^v^vv<<^v.#"},
    {"#><^vvv^^vv>v>^<^v^^<^<v<<v><.^<^v><>>^>^^^.>^v>>..<<>>^>><^^v<^<<^^>^><<"
     ">vvv^.>^v<v>v^>^>vv>vv>.><<>^<v><^.>vv.<<.^^v<<<#"},
    {"#<^v<v^<v<>>v>v^>^<.>^^vv<^^vv^v>^><^^^^<v<^>^<vv<>.^<>>><><>^>>^><^<.v<>"
     "v<.v>.>v<^^v<vv.<vv<<>v.<<<^^^>>^<v^v>^>v<.^vv^>#"},
    {"#>^<<.>^<>>v.>^..v<><v>^v<vv>v^v>>^v>v.>.v>vvv.v.><v.>^^><vv>><<>>v>.v>.>"
     "^>^<>^<<<^>^v^v^.^v^v>>><>v^^^><><v<>>v>.^<^.vv<#"},
    {"#..><.>v<^v<<v>.^^<^>^v<><<>.>>v<^<><>v^<.<<^>v^.>v^<^>vv^<<^>^.>..>.<<<<"
     "^<v<<><<<^>>^<<>v>^^^<^^<>^^><^.<><v<<v^^<<v<v<<#"},
    {"#<^.<v>vv>^.v.^^^.^v<<.^>>><<.<>.<v^^<.v^vv>^^<vvv^>v<>^<^v<v><<^>vvv>.^>"
     "^<^^>v<v^>v^<v<^^..>^>>^.<>>>vv<<<.v>^<<vv<v><>>#"},
    {"#>v<.v^>^^v..>>.^>.>>v><><><<v>^>^>>.>v<vv^<v^v<>><v>><<.>.<><v^.^<>.v^^>"
     "v^><<><>^>^<><v<>v^>v>^^>^><<.>>v<>v.<^v^^..v<v<#"},
    {"#>.>.^.<^v>v^v.>>><v^v.v>.><^>>>^>vv.<v^.^v<vv.<.^<>^<.^v>v<.><>^<v<v<<v<"
     "<.^<v<>>>>>.<v.v<><<>><>^<.<.^>><>^^.>.>^^v>.^<<#"},
    {"#>v><<<>v>.>.^>><<v><^<<v^>.^^^<.<>.>vv>.>v.^><v<>v<v^>>^v>.v^^.vv^^<>v<>"
     "<^^<^><^.^^>^v<vv^>>>>^^<.<v<^<>>.><<v^.v.<..<<>#"},
    {"#<<<vv>>v>>>^<<v<<v><<>^.v>v<v><vv^>^><>^<^^.<>>>><><>^>v^<^vv^>^.<.v<^v."
     ">>>^v.v>>>v<^^>>.>^v>.vv>><<>v^<v>>.v^<><v<v<>v<#"},
    {"#>^<vv<v^v<^.v>>><<v<v.vv<v>^<.>>>>.>.v.>vvv^^^v^<v^v^<><>^<><^>.>^.v^>.<"
     "^v<^v>^..v^^>><.^^>.vv>>>>vvv.^<>>v<>>v>vv^v<>><#"},
    {"#>^^>v^^>..<.>^<v<^v..<v>^<v.v><.<v^.>>v<.><^<>>.<<<^<vv<.<v>v<>v>^<.^^>^"
     "<v<><>>v.>v^v>.<>vv<>.v^>v.v>>><<vv>.>v>v^v<>>v<#"},
    {"#<^v.v>>^^^<^^<^>><>^>><<><<v<<>^.<<v><v.<^>^v<.><v<<.<>^^>v<^^^^.>>^v.><"
     "..>.>v><>^>v.v>^v<^v.vv<><><<^v^vv<<^<^>^<.<<>>.#"},
    {"#>^v<^^v>vv^.^.>>.v>>.^.^.v^>^><>v>>^>>.v.vvvv.v<v.>v><<<>vv>v<<<^<>.^^.<"
     "<..v>^^<<^^<<>><>>v^^v.<<>v^^<^^v>>v><^v^<<<v^^<#"},
    {"#>>.>>><v>>^.v>^^^<..^>>>>.><^^^<^^>>^>vv>^<^<<v^^v.v^><^<<<<>>>.v^<.^^^^"
     "<<v>.v^^^v<<^v<^^<^v<<v>^>.^<<<>>^<.<<<v<.<><^^>#"},
    {"#<v>v^.v>><v<><v>><.<<>^.v<<<^<vv^<^<>^<.^^>>v>>v<^^<v>^<.>vv..<v^<>>^>>>"
     "<.v^v^v^<>^>vvv<v^><v.>><v^v^<^^^.vv>vvv.^>>.^^<#"},
    {"#><v<.^><<.^>>^><<>>>v<>v^>^^^<^><>^>>^v^^^<.>>^vv<^v><>>^<>^^^>^>^>v^vv^"
     "<>.^.^^v^.vv^^^>^v>^v.>^>v><<^.v^.<>v^>^^v<><v><#"},
    {"#>v>^..<^^>^<^^^<v>^.vv<^v<^<..^^>v^>^^^>.v><..>vv<vv^^^^v..<v<^vvv^<v.v<"
     "v^>v<<<v^.^<.>^.^<^v<<<<>^v^>.vv^<<<<>^v><>>><v>#"},
    {"#>>>><<><<<>vvv^<v>>^>..v<vvv<v<>^<<<<vvv^v^v<<vv>><.>><<><^vv<v.>vv<<>><"
     "^>^>.>v>v^v>.<^vvv><vvv^<v<<.^v>..v>v<<^><>v>>^>#"},
    {"#<v>>^v<<^^vv<vv^^^v>^>v^><^^^^>v^v^>>.>vv<>v>^<<v<<^v<><<v<>vvv>v^^^^<^^"
     ".v>>><^v>v^<^<><^v>><<^<<^<^.vv<^<<v.<<v^<><><>>#"},
    {"#><^>>vv<<^v<<^^<><>>^^>><><^>><<^<v^v.^<<^v>>.vv^><v.v.v<<v><>>v>v^>>"
     "vvv>>v..>^<.^<.v.<<^>>^<v^<^v>^>v>>.><v>^<v.v<>v<<<#"},
    {"#><<<^.v^^>.v>>v>>^<>v>>>..^v>.^<>^v..vv^<<v<.^v^<^v<^v>>^..^<^^<v^^v<>."
     "v<vv<^v^vv<>v<<>.^.<<^v^<^>>v^>^v<><>.>v^^vv><^^>#"},
    {"#<<v.>.^v^<<v^v^.^<<<v^>^v<<^<>^>.v<v><<v<v>^>>vv<^v<.<>^^>><>.>vv^>>^<<"
     "v>.>>v^v.vvvv<^v.^>><<<v^.<.><><>>^><^v>v<>>^^>v<#"},
    {"#>>.^<.^>^.<^<.<<<><v^><<v<<<..<vv><<v..><v^v.>v<..^^<.v^<>^>^<v><<vv^v.>"
     "><<v^<>^<<^.>>vv<vv<>><<<^^v>^>v.<<<^^.>>.^v>>>>#"},
    {"#>^<v^<><v^>.^<<<<..<v<>^>>.v<<<^.v>^<<<>>.^.^><>>v>^>>v^v<<<^^<v>><v><>>"
     ">.>>^>^.v.><^^^vv<^<><^<.vv><<vv<<><^<.>>vv^vv><#"},
    {"#########################################################################"
     "###############################################.#"}};

const vector<string> MINE_IN_SMALL = {
    {"#.###############################################"},
    {"#>v<^v>v^.^>vv<><>><^>^v^^vv.^v^^>^^^.^v^vv<<^v.#"},
    {"#><^vvv^^vv>v>^>^^^.>^v.><<>^<v><^.>vv.<<.^^v<<<#"},
    {"#<^v<v^<v<>>v^^^<v<^>^<.<<<^^^>>^<v^v>^>v<.^vv^>#"},
    {"#>^<<.>^<>>v.v.>.v>vvv.><>v^^^><><v<>>v>.^<^.vv<#"},
    {"#..><.>v<^v<<>v^<.<<^>v^<>^^><^.<><v<<v^^<<v<v<<#"},
    {"#<^.<v>vv>^.v<.v^vv>^^<^.<>>>vv<<<.v>^<<vv<v><>>#"},
    {"#>v<.v^>^^v..>v<vv^<v^v^>^><<.>>v<>v.<^v^^..v<v<#"},
    {"#>.>.^.<^v>v^<v^.^v<vv.>^<.<.^>><>^^.>.>^^v>.^<<#"},
    {"#>v><<<>v>.>.vv>.>v.^><^<.<v<^<>>.><<v^.v.<..<<>#"},
    {"#<<<vv>>v>>>^><>^<^^.<>v>><<>v^<v>>.v^<><v<v<>v<#"},
    {"#>^<vv<v^v<^..v.>vvv^^^>>>vvv.^<>>v<>>v>vv^v<>><#"},
    {"#>^^>v^^>..<.>>v<.><^<>^>v.v>>><<vv>.>v>v^v<>>v<#"},
    {"#<^v.v>>^^^<^><v.<^>^v<<><><<^v^vv<<^<^>^<.<<>>.#"},
    {"#>^v<^^v>vv^.>>.v.vvvv.<<>v^^<^^v>>v><^v^<<<v^^<#"},
    {"#>>.>>><v>>^.^>vv>^<^<<>^>.^<<<>>^<.<<<v<.<><^^>#"},
    {"#<v>v^.v>><v<>^<.^^>>v>><v^v^<^^^.vv>vvv.^>>.^^<#"},
    {"#><v<.^><<.^>>^v^^^<.>>^>v><<^.v^.<>v^>^^v<><v><#"},
    {"#>v>^..<^^>^<^^^>.v><..<>^v^>.vv^<<<<>^v><>>><v>#"},
    {"#>>>><<><<<>v<vvv^v^v<<^<v<<.^v>..v>v<<^><>v>>^>#"},
    {"#<v>>^v<<^^vv>.>vv<>v>^<<^<^.vv<^<<v.<<v^<><><>>#"},
    {"#><^>>vv<<^v<v.^<<^v>>.<^v>^>v>>.><v>^<v.v<>v<<<#"},
    {"#><<<^.v^^>.v.vv^<<v<.^<^>>v^>^v<><>.>v^^vv><^^>#"},
    {"#<<v.>.^v^<<v><<v<v>^>>^.<.><><>>^><^v>v<>>^^>v<#"},
    {"#>>.^<.^>^.<^v..><v^v.><<^^v>^>v.<<<^^.>>.^v>>>>#"},
    {"#>^<v^<><v^>.<<<>>.^.^><.vv><<vv<<><^<.>>vv^vv><#"},
    {"###############################################.#"}};

const int SCALE = 20;
const int TARGET_FPS = 10;
int main(int argc, char **argv) {
    Grid g;
    g.init(MINE_IN_SMALL, SCALE);

    SetConfigFlags(FLAG_WINDOW_RESIZABLE);
    auto windowSize = g.windowSize();
    Image elfImage = LoadImageFromMemory(".png",ELF_DATA, ELF_SIZE);
    InitWindow(windowSize.x, windowSize.y+2*elfImage.height, argv[0]);   
    
    Texture2D elf = LoadTextureFromImage(elfImage);
    g.setElf(elf);
    SetExitKey(0);
    SetTargetFPS(TARGET_FPS);
    stringstream ss;

    int tick=0;
    while (!WindowShouldClose()) {
        
        if( tick == 0 ){
            if( IsKeyPressed(KEY_SPACE) ){
                tick++;
            }
        }else{
            tick++;
        }
        if( tick == g.minPathLength() ){
            tick=0;
        }
        BeginDrawing();
        ClearBackground(BLACK);                
        g.draw(tick);        
        EndDrawing();
    }

    CloseWindow();
    return 0;
}
